apiVersion: apps/v1
kind: Deployment     
metadata:
  name: skims-cnr-api
  namespace: skims-core
  labels:
    app: skims-cnr-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: skims-cnr-api
  template:
    metadata:
      labels:
        app: skims-cnr-api
    spec:
      containers:
        - name: skims-cnr-api-boot
          # image: 504441673365.dkr.ecr.ap-northeast-2.amazonaws.com/cnr/cnr-api-boot:latest
          image: alexwhen/docker-2048
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # env: 
          #   - name : JAVA_TOOL_OPTIONS
          #     value: >-
          #       -Dservice_key=5df36bdf-2e39-4676-8293-c43356858342
          #       -Dapplication_name=core-boot -Djava.awt.headless=true
          #       -Dfile.encoding=UTF-8 -Xms6G -Xmx6G -XX:+UseG1GC
          #       -XX:+HeapDumpOnOutOfMemoryError
          #       -XX:HeapDumpPath=./logs
          #       -XX:+DisableExplicitGC -XX:+ScavengeBeforeFullGC
          #       -Dnetworkaddress.cache.ttl=1
          #       -Dnetworkaddress.cache.negative.ttl=0 -Dsun.net.inetaddr.ttl=1
          #       -Dorg.apache.catalina.security.SecurityListener.UMASK=0007
          #       -Djava.security.egd=file:/dev/./urandom
          #       -Dproject.name=core-boot -Dphase=dev -Drunning.port=8080
          #       -Dserver.port=8080 -Dspring.profiles.active="klsdev,eks"
          #       -Dprewarm.enabled=true -Dapplication.log.dir=/ins_data_kis/logs/core-api
          #       -javaagent:/scouter-agent/scouter.agent.jar -Dnet_collector_ip=scouter-server.monitoring.svc.cluster.local  -Dnet_collector_udp_port=6100 -Dnet_collector_tcp_port=6100 -Dlog_dir=./logs
          #   - name: TZ
          #     value: Asia/Seoul
          
      #     livenessProbe:
      #       failureThreshold: 3
      #       httpGet:
      #         path: /actuator/health/ping
      #         port: 8080
      #       initialDelaySeconds: 200
      #       periodSeconds: 30
      #       successThreshold: 1
      #       timeoutSeconds: 10
      #     readinessProbe:
      #       failureThreshold: 1
      #       httpGet:
      #         path: /actuator/health/prewarm
      #         port: 8080
      #       initialDelaySeconds: 200
      #       periodSeconds: 5
      #       successThreshold: 1
      #       timeoutSeconds: 10
      #     resources:
      #       requests:
      #         cpu: "1"
      #         memory: 2Gi
      # restartPolicy: Always


---
apiVersion: v1
kind: Service
metadata:
  name: service-skims-cnr-api
  namespace: skims-core
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: service-skims-cnr-api

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-skims-core
  namespace: skims-core
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/subnets: subnet-02ff12537b2f39df3, subnet-08d44a698f25bf7bb
spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: service-skims-cnr-api
              servicePort: 80
